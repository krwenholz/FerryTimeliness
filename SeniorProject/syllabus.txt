# Fall 2012 Senior Project Syllabus #
# Kyle Wenholz #

# Summary of the project #
What does the world need more than anything else?  A better prediction for the
ferry system!  After looking at what is available to users of the Puget Sound
ferry systems, it became clear we can make advancements in the knowledge 
available to users of the ferries.  The proposed project is to create a model 
predicting the timeliness of a certain ferry given various variables.  It will
be necessary to collect data for the model's creation and testing, create a 
model, decide on variables, collect data for those variables, and package it all
up in some usable format.  The end goal is to have a humane method for predicting
the timeliness of a ferry, leading to a Senior Honors Thesis at University of 
Puget Sound.

# Major project goals #
1. Data: a method for collecting the data necessary to fuel the model and a
way to store this data.  The method should be relatively painless (e.g. a simple
script), and the data store should be well designed in terms of schema, speed,
and reproducibility.
2. Model: a model for predicting ferry timeliness.  The model should utilized
gathered ferry data (an AI problem) and account for variables of interest.  The
most basic of these is weather, but if time permits, traffic patterns, time of
day, and boat type may be considered.
3. Usability: the model should be usable.  Everything produced by this project
ought to be reproducible, understandable, and enjoyable to use.  This will 
include open-sourcing the project, licensing, and thoroughly documenting it all.

# Reach goals #
1. Interface: an interface for non-technical individuals to use.  This may be 
a web page or app for interacting with the model.
2. Beginnings of a thesis: a rough draft or even an outline.  The Honors Thesis
is the end goal of this project, and should I make a dent in the paper itself, 
I will have went beyond my expectations for this project.

# Timeline #
The following is a bi-weekly timeline of goals for this project.  This sort of
schedule fits best with how I work: well-defined time and goals along with a
limit to chaos.  

## September 3-14 ##
* Data collection should be happening.  
* Primary variables should be decided upon (with reasoning).
* Determine core technologies (basically a language and database system).

## September 15-28 ##
* Choose an open-source license and include it with the repository.
* Proof interfacing with the data via language of choice.
* A light literature review should be in the works.  Initially it seems not much
literature is related to this particular topic.

## September 29-October 12 ##
* The model should be taking shape or at least have research into various options.
* Finalize data collection methods for all primary variables.

## October 13-26 ##
* The model is taking shape in code form.  This means, I have one (maybe two)
models chosen to work with, and I am prepared to implement them.
* The model is interacting with the actual data set.
* Extra variables are being considered and evaluated as the model begins to
generate output.  
* Literature review should be "complete".  That is, some sources for the model,
methods, etc. should be found to back up my process.

## October 27-November 9 ##
* The model is generating output, not necessarily correct.  This means the 
general architecture is decided, and the code base should be fleshed out.
* The variables and model itself are well explained in a brief technical writeup
of the design decisions made thus far.

## November 10-23 ##
* The model is considered stable and interesting, otherwise the flaws are being
ironed out or well documented.
* The data should be backed up and stored for any future use.

## November 24-December 7 ##
* The model is finalized.  Minor code changes may be required, but what I have
is usable or proof of the problem's intractibility/complexity above my ability.
* Secondary goals are being approached and evaluated.
* Achievable secondary goals are attacked with vigor.

##  December 8-14 ##
* The project is packaged for public use, and it is cleanly documented, licensed,
and available.
* A writeup regarding the work is taking shape in preparation for the Honors
Thesis.

# Grading #
The grading should be pretty straight-forward.  Every two weeks, I can write 
up what is actually accomplished against the timeline; Brad can write something 
in affirmation or disagreement; and a quick code review can take place. A 
successful project should stay on time (barring any major catastrophes); include
well documented, clean, and fun code; and do something novel.  A great project 
should do all of the above while managing to improve my abilities as a Computer
Scientist through challenging but well accomplished work.  Basically, if it looks 
like the project is the beginnings of a great Honors Thesis, it's an "A".

## Basic breakdown of grades ##
* 60% to the code: cleanliness, documentation, functionality, degree of novelty,
robustness of solution, and ease of use/reproducibility.
* 40% to the execution: timeliness, clear communication with involved parties,
overall quality of work.
